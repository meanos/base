#! /bin/sh
### BEGIN INIT INFO
# Provides:          cgproxy
# Required-Start:    cgmanager
# Required-Stop:     
# Default-Start:    2 3 4 5
# Default-Stop:     0 1 6
# Short-Description: Cgroup manager daemon
# Description:
#  The cgroup manager accepts cgroup administration requests
#  over dbus, honoring privilege by root users in mapped user
#  namespaces over the non-root mapped uids.  This allows safe
#  nesting of lxc containers by unprivileged users.
### END INIT INFO

# Do NOT "set -e"

PATH=/sbin:/bin

DAEMON=/sbin/cgproxy
NAME=cgproxy
DESC="cgroup management proxy daemon"

BASEOPTS="--daemon"

test -x $DAEMON || exit 0

PIDFILE=/run/$NAME.pid

if [ -f /etc/default/cgmanager ]; then
	# get cgmanager_opts if specified
	. /etc/default/cgmanager
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

DAEMON_ARGS="$BASEOPTS $cgmanager_opts"

do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1

	# cgproxy should only run on container unless on older kernel
	if [ -e /proc/self/ns/pid ] && [ "$NESTED" != "yes" ]; then
		log_end_msg 0
		exit 0
	fi

	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return $?
	# Todo - once the compiled cgm is installed we could use it here to ping
	# cgmanager as our test for readiness.
	sleep 1
}

case "$1" in
    restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
    start)
	log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc -p $PIDFILE "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  *)
	echo "Usage: $0 {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
